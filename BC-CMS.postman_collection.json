{
	"info": {
		"_postman_id": "6ad534ec-e7c0-43e7-9b05-627e472545ef",
		"name": "BC-CMS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Workflows",
			"item": [
				{
					"name": "workflow",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"styles\": [\r\n  {\r\n    \"styleId\": \"LV567\",\r\n    \"brand\": \"Louis Vuitton\",\r\n    \"title\": \"LV Monogram Backpack\"\r\n  },\r\n  {\r\n    \"styleId\": \"RLX912\",\r\n    \"brand\": \"Rolex\",\r\n    \"title\": \"Rolex Datejust Watch\"\r\n  },\r\n  {\r\n    \"styleId\": \"CHL445\",\r\n    \"brand\": \"Chanel\",\r\n    \"title\": \"Chanel Classic Flap Bag\"\r\n  },\r\n  {\r\n    \"styleId\": \"GCC721\",\r\n    \"brand\": \"Gucci\",\r\n    \"title\": \"Gucci Ace Sneakers\"\r\n  },\r\n  {\r\n    \"styleId\": \"OMG832\",\r\n    \"brand\": \"Omega\",\r\n    \"title\": \"Omega Seamaster Watch\"\r\n  },\r\n  {\r\n    \"styleId\": \"HMS249\",\r\n    \"brand\": \"Hermes\",\r\n    \"title\": \"Hermes Birkin Bag\"\r\n  },\r\n  {\r\n    \"styleId\": \"DIR567\",\r\n    \"brand\": \"Dior\",\r\n    \"title\": \"Dior Saddle Bag\"\r\n  },\r\n  {\r\n    \"styleId\": \"CTR934\",\r\n    \"brand\": \"Cartier\",\r\n    \"title\": \"Cartier Love Bracelet\"\r\n  },\r\n  {\r\n    \"styleId\": \"LVJ123\",\r\n    \"brand\": \"Louis Vuitton\",\r\n    \"title\": \"LV Speedy Handbag\"\r\n  },\r\n  {\r\n    \"styleId\": \"RLX789\",\r\n    \"brand\": \"Rolex\",\r\n    \"title\": \"Rolex Submariner Watch\"\r\n  },\r\n  {\r\n    \"styleId\": \"CHL556\",\r\n    \"brand\": \"Chanel\",\r\n    \"title\": \"Chanel Boy Bag\"\r\n  },\r\n  {\r\n    \"styleId\": \"GCC345\",\r\n    \"brand\": \"Gucci\",\r\n    \"title\": \"Gucci Marmont Belt\"\r\n  },\r\n  {\r\n    \"styleId\": \"OMG654\",\r\n    \"brand\": \"Omega\",\r\n    \"title\": \"Omega Constellation Watch\"\r\n  },\r\n  {\r\n    \"styleId\": \"HMS987\",\r\n    \"brand\": \"Hermes\",\r\n    \"title\": \"Hermes Kelly Bag\"\r\n  },\r\n  {\r\n    \"styleId\": \"DIR234\",\r\n    \"brand\": \"Dior\",\r\n    \"title\": \"Dior Book Tote Bag\"\r\n  },\r\n  {\r\n    \"styleId\": \"CTR567\",\r\n    \"brand\": \"Cartier\",\r\n    \"title\": \"Cartier Tank Watch\"\r\n  }\r\n]\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}workflows?email=pc.admin@backcountry.com",
							"host": [
								"{{url}}workflows"
							],
							"query": [
								{
									"key": "email",
									"value": "pc.admin@backcountry.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "workflow",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}workflows/646de4de946025c11013e46c",
							"host": [
								"{{url}}workflows"
							],
							"path": [
								"646de4de946025c11013e46c"
							]
						}
					},
					"response": []
				},
				{
					"name": "workflow/history",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}workflows/645de38ca2482cdadfeaee2a/auditLog",
							"host": [
								"{{url}}workflows"
							],
							"path": [
								"645de38ca2482cdadfeaee2a",
								"auditLog"
							]
						}
					},
					"response": []
				},
				{
					"name": "workflows/search",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"filters\": {\r\n        // \"brand\": [\r\n        //     \"nike\"\r\n        // ]\r\n        \"styleId\": \"NEWone\"\r\n        // \"status\": [\r\n        //     \"ASSIGNED_TO_WRITER\"\r\n        // ],\r\n        // \"lastUpdateTs\": \"2023-MAY-12\"\r\n        // \"lastUpdatedBy\": \"deepthi\"\r\n        // \"assignee\": [\"nikhil\"]\r\n    },\r\n    \"orderBy\": {\r\n        \"styleId\": \"desc\"\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}workflows/search?limit=10&page=1",
							"host": [
								"{{url}}workflows"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "unique",
									"value": "status",
									"disabled": true
								},
								{
									"key": "globalSearch",
									"value": "231",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "workflows/search?unique",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}workflows/search?limit=10&page=1&unique=assignee",
							"host": [
								"{{url}}workflows"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "unique",
									"value": "assignee"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "assign",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"filters\": {\r\n        \"id\": \"645de38ca2482cdadfeaee2a\"\r\n        // \"id\": [\"64631c5eab78a923183ed209\"]\r\n        // \"brand\": [\r\n        //     \"puma\"\r\n        // ]\r\n        // \"assiee\": \"writer 3\"\r\n        // \"styleId\": \"NEWone\",\r\n        // \"status\": [\r\n        //     \"ASSIGNED_TO_WRITER\",\r\n        //     \"WRITING_IN_PROGRESS\"\r\n        // ]\r\n        // \"lastUpdateTs\": \"2023-MAY-12\"\r\n        // \"lastUpdatedBy\": \"deepthi\"\r\n        // \"assignee\": [\"nikhil\"]\r\n    },\r\n    \"assignments\": {\r\n        // \"editor\": \"editor1@backcountry.com\"\r\n        \"writer\": \"nikhil.s@backcountry.com\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}workflows/assign",
							"host": [
								"{{url}}workflows"
							],
							"path": [
								"assign"
							]
						}
					},
					"response": []
				},
				{
					"name": "saveForLater",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"genus\": \"Climbing accessories\",\r\n  \"species\": \"Belay Devices\",\r\n  \"harmonizingData\": {\r\n    \"recommendedUse\": [\"Ice climbing\", \"Mountaineering\"],\r\n    \"ropeDiameter\": [\"<9.5mm\"],\r\n    \"type\": [\"Figure 8\"]\r\n  },\r\n  \"techspecs\": {\r\n    \"responsibleCollection\": \"Value1\",\r\n    \"material\": \"Value2\"\r\n  },\r\n  \"productTitle\": \"My product title\",\r\n  \"topLine\": \"The top line\",\r\n  \"detailedDescription\": \"Detailed desc val1\",\r\n  \"listDescription\": \"My list of desc\",\r\n  \"bulletPoints\": \"bullet points 123\",\r\n  \"sizingChart\": \"my sizing chart\",\r\n  \"competitiveCyclistTopline\": \"top line 33\",\r\n  \"competitiveCyclistDescription\": \"desc 123 1\",\r\n  \"versionReason\": \"Editing\",\r\n  \"isPublished\": false\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}workflows/id/saveForLater",
							"host": [
								"{{url}}workflows"
							],
							"path": [
								"id",
								"saveForLater"
							]
						}
					},
					"response": []
				},
				{
					"name": "counts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}workflows/counts?email=raj.kumar@backcountry.com",
							"host": [
								"{{url}}workflows"
							],
							"path": [
								"counts"
							],
							"query": [
								{
									"key": "email",
									"value": "raj.kumar@backcountry.com"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// // Test the POST /workflows endpoint",
							"// pm.test(\"Create Workflow\", function () {",
							"//     pm.sendRequest({",
							"//         url: pm.variables.get(\"url\") + \"/workflows\",",
							"//         method: \"POST\",",
							"//         header: {",
							"//             \"Content-Type\": \"application/json\"",
							"//         },",
							"//         body: {",
							"            ",
							"//         \"admin\": \"The Admin\",",
							"//         \"brand\": \"My Brand1\",",
							"//         \"create_process\": \"WRITER_INTERFACE\",",
							"//         \"create_ts\": \"2023-03-28T23:58:18.000Z\",",
							"//         \"editor\": \"The Editor\",",
							"//         \"editor_review\": true,",
							"//         \"last_edit_complete_ts\": \"2023-03-30T23:58:18.000Z\",",
							"//         \"last_update_ts\": \"2023-03-30T23:58:18.000Z\",",
							"//         \"last_updated_by\": \"Andrew Smith\",",
							"//         \"last_write_complete_ts\": \"2023-03-29T23:58:18.000Z\",",
							"//         \"status\": \"WAITING_FOR_WRITER\",",
							"//         \"style_id\": pm.variables.get(\"workflowId\"),",
							"//         \"title\": \"My product title1\",",
							"//         \"writer\": \"The Writer\"",
							"//         }",
							"//     }, function (err, response) {",
							"//         pm.expect(err).to.be.null;",
							"//         pm.expect(response).to.have.status(200);",
							"//         pm.expect(response.json()).to.have.property(\"workflow\");",
							"//         // Add additional assertions as needed",
							"//     });",
							"// });",
							"",
							"// // Test the GET /workflows endpoint",
							"// pm.test(\"Get Workflows\", function () {",
							"//     pm.sendRequest({",
							"//         url: pm.variables.get(\"url\") + \"/workflows\",",
							"//         method: \"GET\",",
							"//         header: {",
							"//             \"Content-Type\": \"application/json\"",
							"//         }",
							"//     }, function (err, response) {",
							"//         pm.expect(err).to.be.null;",
							"//         pm.expect(response).to.have.status(200);",
							"//         pm.expect(response.json()).to.have.property(\"workflows\");",
							"//         // Add additional assertions as needed",
							"//     });",
							"// });",
							"",
							"// // Test the GET /workflows/:id endpoint",
							"// pm.test(\"Get Workflow by ID\", function () {",
							"//     pm.sendRequest({",
							"//         url: pm.variables.get(\"url\") + \"/workflows/{{workflowId}}\",",
							"//         method: \"GET\",",
							"//         header: {",
							"//             \"Content-Type\": \"application/json\"",
							"//         }",
							"//     }, function (err, response) {",
							"//         pm.expect(err).to.be.null;",
							"//         pm.expect(response).to.have.status(200);",
							"//         pm.expect(response.json()).to.have.property(\"workflow\");",
							"//         // Add additional assertions as needed",
							"//     });",
							"// });",
							"",
							"// // Test the GET /workflows/search endpoint",
							"// pm.test(\"Search Workflows\", function () {",
							"//     pm.sendRequest({",
							"//         url: pm.variables.get(\"url\") + \"/workflows/search\",",
							"//         method: \"GET\",",
							"//         header: {",
							"//             \"Content-Type\": \"application/json\"",
							"//         },",
							"//         params: {",
							"//             query: \"searchQuery\"",
							"//         }",
							"//     }, function (err, response) {",
							"//         pm.expect(err).to.be.null;",
							"//         pm.expect(response).to.have.status(200);",
							"//         pm.expect(response.json()).to.have.property(\"workflows\");",
							"//         // Add additional assertions as needed",
							"//     });",
							"// });",
							"",
							"// // Test the PATCH /workflows/:id endpoint",
							"// pm.test(\"Update Workflow\", function () {",
							"//     pm.sendRequest({",
							"//         url: pm.variables.get(\"url\") + \"/workflows/{{workflowId}}\",",
							"//         method: \"PATCH\",",
							"//         header: {",
							"//             \"Content-Type\": \"application/json\"",
							"//         },",
							"//         body: {",
							"//             mode: \"raw\",",
							"//             raw: JSON.stringify({",
							"//                 // Provide the necessary data for updating the workflow",
							"//                 // e.g., name, description, etc.",
							"//             })",
							"//         }",
							"//     }, function (err, response) {",
							"//         pm.expect(err).to.be.null;",
							"//         pm.expect(response).to.have.status(200);",
							"//         pm.expect(response.json()).to.have.property(\"workflow\");",
							"//         // Add additional assertions as needed",
							"//     });",
							"// });",
							"",
							"// // Test the DELETE /workflows/:id endpoint",
							"// pm.test(\"Delete Workflow\", function () {",
							"//     pm.sendRequest({",
							"//         url: pm.variables.get(\"url\") + \"/workflows/{{workflowId}}\",",
							"//         method: \"DELETE\",",
							"//         header: {",
							"//             \"Content-Type\": \"application/json\"",
							"//         }",
							"//     },function (err, response) {",
							"//         pm.expect(err).to.be.null;",
							"//         pm.expect(response).to.have.status(200);",
							"//         pm.expect(response.json()).to.have.property(\"workflow\");",
							"//         // Add additional assertions as needed",
							"//     });",
							"// });"
						]
					}
				}
			]
		},
		{
			"name": "dataNormalization",
			"item": [
				{
					"name": "genus",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{url}}dataNormalization/genus",
							"host": [
								"{{url}}dataNormalization"
							],
							"path": [
								"genus"
							]
						}
					},
					"response": []
				},
				{
					"name": "genus/:id/speices",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{url}}dataNormalization/genus/22/species",
							"host": [
								"{{url}}dataNormalization"
							],
							"path": [
								"genus",
								"22",
								"species"
							]
						}
					},
					"response": []
				},
				{
					"name": "styles/:id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{url}}dataNormalization/styles/ATRQ03Y",
							"host": [
								"{{url}}dataNormalization"
							],
							"path": [
								"styles",
								"ATRQ03Y"
							]
						}
					},
					"response": []
				},
				{
					"name": "techSpecs",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{url}}dataNormalization/styles/ATRQ03Y/techSpecs",
							"host": [
								"{{url}}dataNormalization"
							],
							"path": [
								"styles",
								"ATRQ03Y",
								"techSpecs"
							],
							"query": [
								{
									"key": "Cookie",
									"value": "{{cookie}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/genus/:gId/species/:sId/hAttributes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}dataNormalization/genus/22/species/197/hAttributes?Cookie={{cookie}}",
							"host": [
								"{{url}}dataNormalization"
							],
							"path": [
								"genus",
								"22",
								"species",
								"197",
								"hAttributes"
							],
							"query": [
								{
									"key": "Cookie",
									"value": "{{cookie}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Groups",
			"item": [
				{
					"name": "token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}groups/token",
							"host": [
								"{{url}}groups"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "members",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}groups/editors/members",
							"host": [
								"{{url}}groups"
							],
							"path": [
								"editors",
								"members"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}